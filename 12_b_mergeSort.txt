/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null)
        return head;
        ListNode slow=head;
        ListNode fast=head;
        ListNode prev=head;
        while(fast!=null && fast.next!=null)
        {
            fast=fast.next.next;
            prev=slow;
            
            slow=slow.next;
        }
        prev.next=null;
        ListNode head1=sortList(head);
        ListNode head2=sortList(slow);
        ListNode head3=merge(head1,head2);
        return head3;
        
    }
    private ListNode merge(ListNode h1,ListNode h2)
    {
        ListNode demo=new ListNode(-1);
        ListNode temp=demo;
        ListNode head1=h1;
        ListNode head2=h2;
        while(head1!=null && head2!=null)
        {
            if(head1.val<head2.val)
            {
                temp.next=head1;
                temp=temp.next;
                head1=head1.next;
            }
            else
            {
                temp.next=head2;
                temp=temp.next;
                head2=head2.next;
            }
        }
        while(head1!=null)
        {
            temp.next=head1;
            temp=temp.next;
            head1=head1.next;

        }
         while(head2!=null)
        {
            temp.next=head2;
            temp=temp.next;
            head2=head2.next;

        }
        return demo.next;

    }
}